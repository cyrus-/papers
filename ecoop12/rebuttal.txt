We thank the reviewers for their thorough critiques and thoughtful questions. We would like to particularly thank Reviewer 3 for soliciting an additional review from a researcher in the targeted user community.

Reviewer 1 expressed concern about the originality of Section 2. We agree that Section 2 does not introduce any individually novel design or adoption criteria. The purpose of this section was to bring together the issues important to language designers in this domain, which has never been done before. We do this to support our position that language designs should be evaluated holistically, against clear design and adoption criteria, consistent with the practices of other complex design disciplines. We will expand on this justification at the beginning of Section 2 in the final manuscript.

We acknowledge the concern raised by reviewers that Section 3 does not clearly state which aspects of the language design are individually novel. We believe that several of the language mechanisms we describe are in fact novel:

* The structural type inference scheme that cl.oquence uses has, to our knowledge, not been previously described. As described in the paper, within-function type inference is combined with type propagation between functions. Aspects of the within-function inference are controlled by the extension mechanism.
* To our knowledge, no language for GPU computing has provided kernel inference and no language targeting OpenCL has provided extension inference.
* The approach described for providing higher-order functions that are not first-class by inlining, rather than by the use of function pointers, has to our knowledge not been explored in existing languages (compilers sometimes do this, but languages do not guarantee this behavior.)
* Active libraries, although proposed previously, have not been adequately explored in practical languages (previous approaches relied on C++ template expansion). We expand on the concept of active libraries significantly, showing how a rich metalanguage (Python) enables a number of interesting language features (Sections 3.5-3.8).
* The language extension mechanism we describe is, to our knowledge, entirely novel, and is a major contribution of this paper.

We will take care to emphasize the extent to which each feature we describe is novel in the final manuscript.

Several reviewers note that we did not provide benchmarks to justify our claim that the OpenCL backend is performance-neutral. In fact, this claim is not an empirical one. We justify it by noting that all of the mechanisms that we describe are compile-time mechanisms -- cl.oquence does not introduce any additional run-time machinery or code transformations that may be the source of performance degradation. However, we would be happy to provide our benchmark data that demonstrates this 100% parity in performance to further emphasize this point in the final manuscript.

Several reviewers asked for more specific references to design criteria, in particular in section 3.2. We acknowledge this lack of specificity. Although we do reference section headings whenever relevant, we will be more specific about the way in which the described feature satisfies the referenced criteria in the final manuscript.

