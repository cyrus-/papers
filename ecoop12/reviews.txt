Review 1:

          >>> Summary of the submission <<<

This paper first discusses design and adoption criteria for
new programming languages. Then it proposes a new language
named cl.oquence, which is a Python-based programming language.
cl.oquence was designed to provide a better programming language
for developers who want to write a program with OpenCL.



          >>> Evaluation <<<

Section 2 is interesting reading but it is a collection of arguments
well known or already mentioned elsewhere. It is unfortunately
difficult to see the author's originality in this section.

Section 3 is a brief overview of the cl.oquence language.
It would be good for a programming manual but not for a research
paper. This gave the reviewer an impression that cl.oquence was
carefully designed but all the ideas adopted for cl.oquence were
borrowed from other languages. It was difficult to see the author's
originality in the design of cl.oquence. The paper should be
revised to clearly present unique features of cl.oquence against
other existing languages. Furthermore, the features of cl.oquence
should be evaluated by using the criteria presented in Section 2.

------------------------------------------------------------------------

Review 2:

          >>> Summary of the submission <<<

A lot of software is written by professional end users, i.e. scientists
with fairly sophisticated needs but no computer science training. These 
users often employ scripting languages such as Python because of their
ease of use compared with languages such as C++, Java. However, scripting
language often lack desirable properties (such as ease of verification).

This paper introduces cl.oquence, a new language designed to meet the needs 
of such users. cl.oquences uses a Python-like syntax but targets several
backends: the paper focuses mainly on an OpenCL backend. cl.oquence offers
features such as static typing, active libraries, higher order functions
(though functions are not first class), etc. Much of the paper is devoted
to a engthy discussion of desiderata for scientific programming languages
(10pp);
the features of cl.oquence are then introduced and the paper concludes with
a brief case study of its use.



          >>> Evaluation <<<

Pros.

The problem addressed is a significant one. A very large amount of software
is written by non-experts. Often this software is of poor quality.

cl.oquence makes programming simpler compared to e.g. Java or C++ but it seems
at no loss of performance. However, the narrative was far from clear here, 
simply asserting that it was not at a performance disadvantage.

cl.oquence provides a number of useful programming constructs that are not
provided e.g. by OpenCL.


Cons.

While cl.oquence may make it quicker to write software, it is far from 
clear that it will address the fundamental problem of poor coding practices.

cl.oquence does not introduce any new ideas in language design. Instead, it 
brings together a number of useful concepts. As such, it is only an
incremental advance.

Little evidence of performance was provided (other than showing that some
small
code fragments translated to close to that which might have been written in 
OpenCL by hand.

I'd have expected a more thorough comparison of the extend to which cl.oquence
met the desiderata of the earlier part of the paper.

Although a case study is provided as evidence of use, it is of its use by the 
author's own group. The proof of the pudding of any new language are: has it 
been adopted outside the designer's immediate group? The answer here seems to
be no, which makes it premature for publication at ECOOP.

------------------------------------------------------------------------

Review 3:

          >>> Summary of the submission <<<

The paper introduces a new programming language, cl.oquence,
targeting the scientific and high-performance computing
community. The language design is motivated by a number of design
and adoption criteria which are based on results from empirical
studies, when possible.

Programs in the cl.oquence language are actually Python programs
which when executed generate OpenCL code. The system can hence be
seen as a Python framework for generating OpenCL code. The system
is however not specifically designed for OpenCL, but can support
backends for other target languages, too. Using Python as a
hosting language has many benefits such as being able to rely on
Python for parsing, and being able to use its module system. Also,
the syntax is familiar to many, and it is possible to call
cl.oquence functions directly from Python. However, the cl.oquence
is a language of its own; a compiled language with statical typing
and structural type inference. It is designed to be extendible,
and by providing an interface to the type checking and code
generation, it is possible for the developer to add new
abstractions and domain specific optimizations to the language.

Advantages and example uses for the language are presented,
together with a case study demonstrating its practical use.



          >>> Evaluation <<<

Almost half of the paper reads like a shallow survey of various
design considerations for programming language design, which I
suspect are widely known in the ECOOP community already. The
cl.oquence language introduced on p. 11 is claimed to be designed
after "many" of the criteria. The paper seems unclear of its
nature and what it is about. 

The description of the language is shallow and the examples don't
give me many insights. The paper reads as a relatively shallow
white-paper for the language. 

I have a feeling that the scientific computing community would be
much better served by this article, and I suggest that it be
resubmitted to a suitable conference in this field. 


--- Other reviewers from the scientific computing area wrote:

The paper is successful in convincing me that this is a great idea
with practical use, and I can imagine using this language myself.
The listed design criteria appear sound, and the author has done a
good job in finding interesting studies to support them, but is
honest about the difficulties of objectively evaluate a language
design. The use of Python as a hosing language is a good idea with
many benefits, and that the language is designed for extendibility
and supports replaceable backends makes it promising.

The resulting language design could be more clearly evaluated
against the chosen criteria. For instance, Section 3.2 notes that
"by re-using an existing, widely-used grammar, we are able to
satisfy many of the design criteria described in Section 2.2 and
the adoption criteria described in Section 2.3 without significant
development effort." A deeper discussion of which goals, and how
well they are satisfied would be desired. One could interpret this
as the design criteria of a concise, familiar and readable syntax
is reached by inheriting the grammar from Python, which is only
partly true. Python's grammar also limits the possibilities to
reach the desired notation. As an example, a scientist would
likely want to use MATLAB like notation such as "[1 2 3; 1 3 2; 3
2 1] \ [1 2 3]'" to solve a 3x3 linear system, which does not fit
into Python's grammar. A new section, with a more careful
evaluation of how well the language fits each point, could be a
suitable for such a discussion.

Examples of possible uses is given much space, and it is mentioned
that both prototypes of wrappers for Global Arrays and NVidia GPU
specific optimizations have been implemented. It would have been
interesting to see examples of these extensions, to be able to
evaluate how easily such extensions are made, and consequently how
well the language suits its goals.

An important issue when dealing with code generation is how
compilation errors from the generated code can be mapped to the
original meta-program. A discussion of this problem would be
interesting, but is missing in the paper.

I find the paper to be well written and as having a clear
structure.


MINOR SUGGESTIONS

Second paragraph on page 13: Write Hindleyâ€“Milner instead of
HM. The reader cannot be expected to know about the HM algorithm,
as type inference was introduced in the previous paragraph,
assuming no prior knowledge.

Figure 4 on page 16: The line "d_out = ctx.alloc(like=d_x)"
references a variable d_x which is not present.

Page 18, Use Cases: Refers to "Section 2.2 and 2.2"
