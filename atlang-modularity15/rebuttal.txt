We thank the referees for their time and the useful comments.

R1,R3
-We will provide a full account of all rules+lemmas in the TR.

-Writing an extension is indeed no easier than writing a compiler plugin,
 but the idea is that the effort to *compose* extensions is substantially
 less. Every tycon can be implemented without knowledge of which others will  
 be in use, because each term is controlled by exactly one stable tycon. 
 Tycons also do not need to know the precise structure of the context  
 (only the fn tycon generally manipulates the context).

R2, R3
-We agree that Sec2 goes into the details too quickly, and as suggested, we 
 will give a simpler first example at the beginning of Sec2.

R3, R4
-We used a more "clunky" syntax to emphasize compatibility with Python 2.
 For those willing to use Python3, a more conventional syntax is available,
 Listing13.

R1
-Like in typed functional languages, types are not retained at run-time 
 (Listings 10,14). We see the ability to use the type to determine 
 translations as a feature. Had the system been like Dart -- a layer above a 
 fixed dynamics -- we would have needed to retain record/casetype 
 labels and regular string indices at run-time. We will include more 
 discussion of these points.

-You can think of a tycon as a function from a type _index_ to a type.
 Type indices might be one or more types, or any other static value.

- attr["r"] is not a function -- attr is a term constructor (Attribute,
 in Python's grammar) and "r" is a static index. In attr["r"](e), e is 
 the target argument; its type determines the semantics of the whole term.

-"Naming conflicts" on p11 refers specifically to conflicts between 
 tycon names in @lambda. In @lang, this is resolved by the Python 
 package system.

R2
-We agree that case studies giving performance results for particular 
 extensions  (e.g. for the OpenCL FFI) would be useful but for concison,
 we must give these in future work. Our contribution in this paper is in 
 detailing the underlying mechanism, rather than any particular use of it.

-We discuss applying the technique in other languages briefly at the 
 beginning of Sec. 6. We will consider giving more detail in the final version.

-We have considered the case where the target language is typed in our
 OpenCL example, though did not describe it in significant detail. The key 
 is that types themselves need translations. Formalizing this is a subtle 
 topic and is covered in recently submitted work (a copy has been 
 sent to the PC chair).

-The phrase "tracks the regular language an immutable string is in" means
 that each term of type stringin[r] is guaranteed to be in the regular 
 language specified by r, and is immutable. We will clarify.

-A prototypic object consists of two objects: the "fore" is the object 
 consulted first when requesting a field. The prototype is consulted only 
 if a field is not in the fore.
