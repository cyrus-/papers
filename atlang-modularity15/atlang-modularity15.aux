\relax 
\citation{Meyerovich:2013:EAP:2509136.2509515,chen05}
\citation{cave2010comparing}
\citation{conf/pldi/SchwerdfegerW09}
\citation{TSLs,sac15}
\providecommand \oddpage@label [2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}}
\newlabel{intro}{{1}{1}}
\citation{wadler1998expression}
\citation{TSLs}
\citation{Pierce:2000:LTI:345099.345100}
\citation{tarver2008functional}
\citation{sanitation-psp14}
\citation{Lie86}
\citation{Ungar:Smith:oopsla:1987}
\@writefile{toc}{\contentsline {paragraph}{Organization}{3}}
\@writefile{toc}{\contentsline {section}{\numberline {2}\texttt  {typy}}{3}}
\newlabel{usage}{{2}{3}}
\@writefile{toc}{\contentsline {paragraph}{Phase Separation}{3}}
\@writefile{toc}{\contentsline {paragraph}{Package Management}{3}}
\newlabel{imports-start}{{1}{3}}
\newlabel{imports-end}{{2}{3}}
\newlabel{hello-ct}{{4}{3}}
\newlabel{decl-Account}{{6}{3}}
\newlabel{decl-Transfer-start}{{11}{3}}
\newlabel{decl-Transfer-end}{{15}{3}}
\newlabel{log-transfer-start}{{17}{3}}
\newlabel{log-transfer-docstring}{{19}{3}}
\newlabel{log-transfer-sig}{{20}{3}}
\newlabel{log-transfer-print}{{21}{3}}
\newlabel{log-transfer-end}{{22}{3}}
\newlabel{main-start}{{24}{3}}
\newlabel{account-start}{{26}{3}}
\newlabel{account-end}{{28}{3}}
\newlabel{log_transfer-start}{{29}{3}}
\newlabel{main-end}{{32}{3}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {1}{\ignorespaces [\texttt  {listing1\hbox {}.py}] A \texttt  {typy} program.}}{3}}
\newlabel{example}{{1}{3}}
\@writefile{toc}{\contentsline {paragraph}{Types}{3}}
\citation{python}
\citation{python}
\citation{python}
\@writefile{lop}{\contentsline {codelisting}{\numberline {2}{\ignorespaces Tycons are classes during the static phase. They have the opportunity to validate and normalize the type index.}}{4}}
\newlabel{record_init}{{2}{4}}
\@writefile{toc}{\contentsline {paragraph}{Type Constructors}{4}}
\@writefile{toc}{\contentsline {paragraph}{Typed Functions}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Active Typechecking}{4}}
\newlabel{s:atc}{{2.1}{4}}
\@writefile{toc}{\contentsline {paragraph}{Function Bodies}{4}}
\newlabel{syn_idx_FunctionDef}{{2}{5}}
\newlabel{ana_FunctionDef}{{18}{5}}
\newlabel{check_Expr}{{42}{5}}
\newlabel{syn_Name}{{47}{5}}
\newlabel{default_asc}{{53}{5}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {3}{\ignorespaces A portion of the type constructor \texttt  {typy.std.fn}.}}{5}}
\newlabel{fn-top}{{3}{5}}
\@writefile{toc}{\contentsline {paragraph}{Statements}{5}}
\citation{Pierce:2000:LTI:345099.345100}
\citation{sanitation-psp14}
\@writefile{toc}{\contentsline {paragraph}{Expressions}{6}}
\@writefile{toc}{\contentsline {subparagraph}{Literal Forms}{6}}
\newlabel{ana_Dict}{{4}{6}}
\newlabel{syn_idx_Dict}{{14}{6}}
\newlabel{syn_Attribute}{{23}{6}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {4}{\ignorespaces A portion of the \texttt  {typy.std.record} type constructor.}}{6}}
\newlabel{record}{{4}{6}}
\@writefile{toc}{\contentsline {subparagraph}{Incomplete Type Ascription}{6}}
\citation{python}
\@writefile{lop}{\contentsline {codelisting}{\numberline {5}{\ignorespaces Block-scoped settings for type constructors.}}{7}}
\newlabel{defaultasc}{{5}{7}}
\@writefile{toc}{\contentsline {subparagraph}{Lowercase Names}{7}}
\@writefile{toc}{\contentsline {subparagraph}{Targeted Expressions}{7}}
\newlabel{handles_Add_with}{{10}{7}}
\newlabel{syn_BinOp_Add}{{11}{7}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {6}{\ignorespaces Binary operations in \texttt  {typy.std.string\_in}.}}{7}}
\newlabel{string_in}{{6}{7}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {7}{\ignorespaces For each type constructor definition and binary operator, \texttt  {typy} runs a modular handle set check to preclude ambiguity.}}{7}}
\newlabel{check_tycon}{{7}{7}}
\@writefile{toc}{\contentsline {subparagraph}{Binary Expressions}{7}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {8}{\ignorespaces Translation methods for the types defined above.}}{8}}
\newlabel{trans}{{8}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Active Translation}{8}}
\newlabel{s:atr}{{2.2}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Standalone Compilation}{8}}
\newlabel{compilation}{{2.3}{8}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {9}{\ignorespaces Compiling \texttt  {listing1\hbox {}.py} using the \texttt  {@} script.}}{8}}
\newlabel{external-compilation}{{9}{8}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {10}{\ignorespaces [\texttt  {\_atout\_listing1\hbox {}.py}] The file generated in Listing 9\hbox {}.}}{8}}
\newlabel{example-out}{{10}{8}}
\@writefile{toc}{\contentsline {paragraph}{Type Errors}{8}}
\citation{pfpl}
\citation{Pierce:2000:LTI:345099.345100}
\citation{Harper00atype-theoretic}
\newlabel{error-start}{{7}{9}}
\newlabel{error-end}{{11}{9}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {11}{\ignorespaces [\texttt  {listing11\hbox {}.py}] Lines 7\hbox {}-11\hbox {} each have a type error.}}{9}}
\newlabel{oops}{{11}{9}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {12}{\ignorespaces Execution never proceeds into a function with a type error when using \texttt  {typy} for implicit compilation.}}{9}}
\newlabel{oops-exec}{{12}{9}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4}Interactive Invocation}{9}}
\newlabel{interactive}{{2.4}{9}}
\@writefile{toc}{\contentsline {section}{\numberline {3}@$\lambda $: Active Type Constructors, Minimally}{9}}
\newlabel{theory}{{3}{9}}
\@writefile{toc}{\contentsline {paragraph}{Fragment Client Perspective}{9}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Abstract syntax of @$\lambda $. Metavariable $\textsc  {tycon}$ ranges over type constructor names (assumed globally unique), ${\texttt  {lbl}}$ over static labels, $x, y$ over expression variables and ${\bf  x}, {\bf  y}$ over static variables. We indicate that variables or static variables are bound within a term or static term by separating them with a dot, e.g. ${\bf  x}.{\bf  y}.e$, and abbreviate a sequence of zero or more expressions as $\overline  {e}$. }}{9}}
\newlabel{syntax-clients}{{2}{9}}
\@writefile{toc}{\contentsline {subparagraph}{Types and Ascriptions}{9}}
\@writefile{toc}{\contentsline {subparagraph}{Literal Desugaring}{9}}
\@writefile{toc}{\contentsline {subparagraph}{Targeted Expression Desugaring}{9}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces A program written using conventional concrete syntax, left, syntactically desugared to the abstract syntax on the right.}}{10}}
\newlabel{atlam-example}{{1}{10}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Bidirectional active typechecking and translation. For concision, we use standard functional notation for static function application.}}{10}}
\newlabel{atj}{{3}{10}}
\@writefile{toc}{\contentsline {paragraph}{Bidirectional Active Typechecking and Translation}{10}}
\citation{pfpl}
\citation{pfpl}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces The \textsc  {fn} fragment defines function application.}}{11}}
\newlabel{fn-tycon}{{4}{11}}
\@writefile{toc}{\contentsline {paragraph}{Lambdas}{11}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces The $\textsc  {nat}$ fragment, based on G\"odel's \textbf  {T} \cite  {pfpl}.}}{11}}
\newlabel{nat-tycon}{{5}{11}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces The $\textsc  {lprod}$ fragment (labeled products are like records, but the field order matters; cf. Listing 4\hbox {}).}}{11}}
\newlabel{lprod-tycon}{{6}{11}}
\@writefile{toc}{\contentsline {paragraph}{Fragment Provider Perspective}{11}}
\@writefile{toc}{\contentsline {subparagraph}{Literals}{11}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Selected normalization rules for the static language.}}{12}}
\newlabel{tleval}{{7}{12}}
\@writefile{toc}{\contentsline {subparagraph}{Targeted Terms}{12}}
\@writefile{toc}{\contentsline {paragraph}{Metatheory}{12}}
\citation{activelibraries}
\citation{Rompf:2012:LMS}
\citation{vanWijngaarden:Mailloux:Peck:Koster:Sintzoff:Lindsey:Meertens:Fisker:acta:1975}
\citation{Kiczales91}
\citation{conf/asplos/CoxBCKK08}
\citation{erdweg2013state}
\citation{wadler1998expression}
\citation{TypedScheme2008}
\citation{pfpl}
\citation{Lovas08abidirectional}
\citation{TSLs}
\citation{erdweg2011sugarj}
\@writefile{toc}{\contentsline {section}{\numberline {4}Related Work}{13}}
\newlabel{related}{{4}{13}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Discussion}{13}}
\newlabel{discussion}{{5}{13}}
\citation{Meyerovich:2012:SDR:2414721.2414724,Meyerovich:2013:EAP:2509136.2509515}
\bibstyle{abbrv}
\bibdata{../research}
\bibcite{python}{{1}{}{{}}{{}}}
\bibcite{cave2010comparing}{{2}{}{{}}{{}}}
\bibcite{chen05}{{3}{}{{}}{{}}}
\bibcite{conf/asplos/CoxBCKK08}{{4}{}{{}}{{}}}
\bibcite{erdweg2011sugarj}{{5}{}{{}}{{}}}
\bibcite{erdweg2013state}{{6}{}{{}}{{}}}
\bibcite{sanitation-psp14}{{7}{}{{}}{{}}}
\bibcite{pfpl}{{8}{}{{}}{{}}}
\bibcite{Harper00atype-theoretic}{{9}{}{{}}{{}}}
\bibcite{Kiczales91}{{10}{}{{}}{{}}}
\bibcite{klockner2011pycuda}{{11}{}{{}}{{}}}
\bibcite{Lie86}{{12}{}{{}}{{}}}
\bibcite{Lovas08abidirectional}{{13}{}{{}}{{}}}
\bibcite{Meyerovich:2012:SDR:2414721.2414724}{{14}{}{{}}{{}}}
\bibcite{Meyerovich:2013:EAP:2509136.2509515}{{15}{}{{}}{{}}}
\bibcite{TSLs}{{16}{}{{}}{{}}}
\bibcite{sac15}{{17}{}{{}}{{}}}
\bibcite{Pierce:2000:LTI:345099.345100}{{18}{}{{}}{{}}}
\@writefile{toc}{\contentsline {section}{\numberline {6}Implementation}{14}}
\@writefile{toc}{\contentsline {section}{\numberline {7}Conclusion}{14}}
\@writefile{tdo}{\contentsline {todo}{finish this}{14}}
\pgfsyspdfmark {pgfid1}{12770433}{4723506}
\pgfsyspdfmark {pgfid2}{2225110}{4721213}
\pgfsyspdfmark {pgfid3}{3388373}{4502323}
\bibcite{Rompf:2012:LMS}{{19}{}{{}}{{}}}
\bibcite{conf/pldi/SchwerdfegerW09}{{20}{}{{}}{{}}}
\bibcite{tarver2008functional}{{21}{}{{}}{{}}}
\bibcite{TypedScheme2008}{{22}{}{{}}{{}}}
\bibcite{Ungar:Smith:oopsla:1987}{{23}{}{{}}{{}}}
\bibcite{vanWijngaarden:Mailloux:Peck:Koster:Sintzoff:Lindsey:Meertens:Fisker:acta:1975}{{24}{}{{}}{{}}}
\bibcite{activelibraries}{{25}{}{{}}{{}}}
\bibcite{wadler1998expression}{{26}{}{{}}{{}}}
\citation{sanitation-psp14}
\@writefile{toc}{\contentsline {section}{\numberline {A}More Examples}{15}}
\newlabel{examples}{{A}{15}}
\@writefile{toc}{\contentsline {subsection}{\numberline {A.1}Functional Datatypes and Nested Pattern Matching}{15}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {13}{\ignorespaces An example of case types and nested pattern matching.}}{15}}
\newlabel{example-casetypes}{{13}{15}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {14}{\ignorespaces The translation of Listing 13\hbox {}. Case types are implemented as fast tagged values.}}{15}}
\newlabel{example-casetypes-out}{{14}{15}}
\citation{klockner2011pycuda}
\@writefile{lop}{\contentsline {codelisting}{\numberline {15}{\ignorespaces The implementation of the case analysis operator uses intermediate type constructors that contain only typing logic but no translation logic. It also defines its own ``second-order'' extensibility mechanism.}}{16}}
\newlabel{example-casetypes-impl}{{15}{16}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {16}{\ignorespaces An example use of our typed FFI to OpenCL, demonstrating both template functions and phaseless capture.}}{16}}
\newlabel{example-opencl}{{16}{16}}
\@writefile{toc}{\contentsline {subsection}{\numberline {A.2}A Low-Level Foreign Function Interface to OpenCL}{16}}
\providecommand\NAT@force@numbers{}\NAT@force@numbers
\@writefile{lop}{\contentsline {codelisting}{\numberline {17}{\ignorespaces The underlying code generated by \texttt  {typy.std.opencl} as a string passed through \texttt  {pyopencl}.}}{17}}
\newlabel{example-opencl-out}{{17}{17}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {18}{\ignorespaces A portion of the logic of OpenCL template functions, showing how they defer to the logic for standard OpenCL functions at each call site, rather than at the declaration site.}}{17}}
\newlabel{example-opencl-templatefn}{{18}{17}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {19}{\ignorespaces The \texttt  {opencl.Buffer} class represents OpenCL memory objects in global device memory, inheriting from the \texttt  {pyopencl.Buffer} class. These supports phaseless capture at the corresponding global pointer type.}}{17}}
\newlabel{example-opencl-buffer}{{19}{17}}
\newlabel{sigplanconf@finalpage}{{A.2}{17}}
