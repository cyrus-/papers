Inductive type : Set := 
  | nat : type
  | fixed_list : nat -> type.

Inductive A : Type :=
  | a.

Inductive B : Type :=
  | b.

Inductive T : Type :=
  | t : (A -> T) -> T.

Inductive Tz : Type :=
  | tz : ((A -> Tz) -> Tz) -> Tz.

Definition m (tee : T) : A -> B -> A :=
  let q := fun (x : A) => fun (y : B) => 
    match tee with 
    | t f => f x y
    end in
  q.

Definition q (x : A) (y : B) : B :=
  match tee with 
 
Inductive IType : Set := 
  | arrow_i : IType -> IType -> IType
  | etc_i : IType.

Inductive ITerm : Set :=
  | var_i : var -> exp
  | lam_i : var_i -> IType -> ITerm -> ITerm
  | fix_i : var_i -> IType -> ITerm -> ITerm
  | app_i : ITerm -> ITerm -> ITerm
  | etc : ITerm.

Inductive Den : Set := 
  | err : Den
  | den : ITerm -> type -> Den.

Inductive op (n : nat) : Set := 
  | const : Den -> op z
  | unary : Den -> Den -> op (s z)
  | binary : Den -> Den -> Den -> op (s s z)
  | ternary : Den -> Den -> Den -> Den -> op (s s s z).

Inductive exp : set := 
  | var_e : var -> exp
  | lam_e : var -> type -> exp -> exp
  | app_e : exp -> exp -> exp
  | const_e : op z -> exp
  | unary_e : op (s z) -> exp -> exp
  | binary_e : op (s s z) -> exp -> exp -> exp.

