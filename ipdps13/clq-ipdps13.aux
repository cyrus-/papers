\relax 
\citation{howison2011scientific}
\citation{hannay2009scientists}
\citation{hannay2009scientists}
\citation{nguyen2010survey}
\citation{4222616}
\citation{4222616}
\citation{basili2008understanding}
\citation{basili2008understanding}
\@writefile{toc}{\contentsline {section}{\numberline {I}Introduction}{1}}
\citation{activelibraries}
\@writefile{toc}{\contentsline {section}{\numberline {II}The $\textsf  {cl.oquence}$ Language}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {II-A}}Example: Higher-Order Map for OpenCL}{2}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Data-parallel higher-order map in $\textsf  {cl.oquence}$. The \texttt  {get\_global\_id} function is an OpenCL primitive function.}}{2}}
\newlabel{map}{{1}{2}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces An OpenCL kernel function that maps the sin function over a vector of double-precision floating-point numbers in the global memory address space.}}{2}}
\newlabel{mapsinint}{{2}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {II-B}}Syntax}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {II-C}}Semantics}{2}}
\citation{tapl}
\citation{malayeri2009structural}
\citation{activelibraries}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {\unhbox \voidb@x \hbox {II-C}1}Type, Kernel and Extension Inference}{3}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {\unhbox \voidb@x \hbox {II-C}2}Structural Polymorphism}{3}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {\unhbox \voidb@x \hbox {II-C}3}Higher-Order Functions}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Programmatically specializing the \texttt  {map} function from Figure 1\hbox {} for use by the standalone compiler to produce code equivalent to Figure 2\hbox {}.}}{4}}
\newlabel{specialization}{{3}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {II-D}}Active Libraries in $\textsf  {cl.oquence}$}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {II-E}}Module System}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {II-F}}Compilation and Invocation}{4}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {\unhbox \voidb@x \hbox {II-F}1}Programmatic Specialization and Compilation}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces A full OpenCL program using the $\textsf  {cl.oquence}$ Python bindings, including data transfer and kernel invocation.}}{4}}
\newlabel{py}{{4}{4}}
\newlabel{direct}{{\unhbox \voidb@x \hbox {II-F}2}{4}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {\unhbox \voidb@x \hbox {II-F}2}Direct Invocation from Python}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {II-G}}Code Generation in $\textsf  {cl.oquence}$}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces A portion of the implementation of OpenCL pointer types implementing subscripting logic using the $\textsf  {cl.oquence}$ extension mechanism.}}{5}}
\newlabel{pointers}{{5}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {II-H}}Active Language Extensions}{5}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {\unhbox \voidb@x \hbox {II-H}1}Dispatch Protocol}{5}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {\unhbox \voidb@x \hbox {II-H}2}Verification and Translation}{5}}
\newlabel{backends}{{\unhbox \voidb@x \hbox {II-H}3}{5}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {\unhbox \voidb@x \hbox {II-H}3}Modular Backends}{5}}
\citation{cave2010comparing}
\citation{conf/cefp/Kennedy09}
\citation{yang2010gpgpu}
\citation{yang2010gpgpu}
\citation{neurobook}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {\unhbox \voidb@x \hbox {II-H}4}Use Cases}{6}}
\@writefile{toc}{\contentsline {paragraph}{\relax Partitioned Global Address Spaces}{6}}
\@writefile{toc}{\contentsline {paragraph}{\relax Other Parallel Abstractions}{6}}
\@writefile{toc}{\contentsline {paragraph}{\relax Domain-Specific Type Systems}{6}}
\@writefile{toc}{\contentsline {paragraph}{\relax Specialized Optimizations}{6}}
\@writefile{toc}{\contentsline {paragraph}{\relax Instrumentation}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {II-I}}Availability}{6}}
\@writefile{toc}{\contentsline {section}{\numberline {III}Case Study: Neurobiological Circuit Simulation}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {III-A}}Background}{6}}
\citation{klockner2011pycuda}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {III-B}}The {\sf  cl.egans} Simulation Library}{7}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces An example of a nested simulation tree, showing that specifying a simulation is both simple and modular.}}{7}}
\newlabel{spec}{{6}{7}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces An example of a hook that inserts code and also inserts new, nested hooks for downstream simulation nodes below that.}}{7}}
\newlabel{impl}{{7}{7}}
\@writefile{toc}{\contentsline {section}{\numberline {IV}Conclusion}{7}}
\bibstyle{IEEEtran}
\bibdata{../research}
