\relax 
\citation{fowler2010domain}
\citation{journals/stp/Ward94}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}}
\citation{reynoldsexpressionproblem}
\citation{expressionproblem}
\citation{tlc}
\citation{activelibraries}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces \relax \fontsize  {9}{11}\selectfont  \abovedisplayskip 8.5\p@ plus3\p@ minus4\p@ \abovedisplayshortskip \z@ plus2\p@ \belowdisplayshortskip 4\p@ plus2\p@ minus2\p@ \def \leftmargin = \leftmargini \listparindent = 0pt{\leftmargin \leftmargini \topsep 4\p@ plus2\p@ minus2\p@ \parsep 2\p@ plus\p@ minus\p@ \itemsep \parsep }\belowdisplayskip \abovedisplayskip (a) With the language-oriented approach, novel constructs are packaged into separate languages. Users can only safely and naturally call into languages consisting of common constructs. (b) With the library-oriented approach, there is one language and novel constructs are packaged as normal libraries. Thus, interoperability is not a problem. in monolithic systems, this approach is less expressive.}}{2}}
\newlabel{approaches}{{1}{2}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Inversion of Control in a Compiler}{2}}
\newlabel{inversion}{{2}{2}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Structure and Usage}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Example 1: Hello, World!}{2}}
\@writefile{lol}{\contentsline {lstlisting}{hello.py}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces \texttt  {[hello.py]} A basic Ace program demonstrating the two-phase structure of Ace programs and libraries.}}{3}}
\newlabel{hello}{{2}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Compiling \texttt  {hello.py} using the \texttt  {acec} compiler.}}{3}}
\newlabel{helloout}{{3}{3}}
\@writefile{lol}{\contentsline {lstlisting}{listing3.py}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces [\texttt  {listing4\hbox {}.py}] A generic data-parallel higher-order map function written using the OpenCL user module.}}{3}}
\newlabel{map}{{4}{3}}
\@writefile{lol}{\contentsline {lstlisting}{listing4.py}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces [\texttt  {listing5\hbox {}.py}] The generic \texttt  {map} function compiled to map the \texttt  {add5} function over two types of input.}}{3}}
\newlabel{mapadd5dbl}{{5}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Example 2: Higher-Order Map for OpenCL}{3}}
\citation{opencl}
\@writefile{lol}{\contentsline {lstlisting}{listing5.cl}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces [\texttt  {listing6\hbox {}.cl}] The OpenCL code generated by running \texttt  {acec listing2.py}.}}{4}}
\newlabel{mapout}{{6}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}Types as Metalanguage Objects}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4}Type Propagation and Higher-Order Functions}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.5}Type Inference}{4}}
\citation{pyopencl}
\citation{pyopencl}
\@writefile{lol}{\contentsline {lstlisting}{listing6.py}{5}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces \texttt  {[listing6.py]} A function demonstrating whole-function type inference when multiple values with differing types are assigned to a single variable.}}{5}}
\newlabel{inference}{{7}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.6}Annotation and Extension Inference}{5}}
\@writefile{lol}{\contentsline {lstlisting}{listing7.py}{5}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces [\texttt  {listing7.py}] Metaprogramming with Ace, showing how to construct generic functions from both strings and abstract syntax trees, and how to manipulate syntax trees at compile-time.}}{5}}
\newlabel{metaprogramming}{{8}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.7}Metaprogramming in Ace}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.8}Direct Invocation from Python}{5}}
\newlabel{direct}{{3.8}{5}}
\citation{pyopencl}
\@writefile{lol}{\contentsline {lstlisting}{listing8.py}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces [\texttt  {listing9\hbox {}.py}] A full OpenCL program using the \texttt  {Ace.OpenCL} Python bindings, including data transfer to and from a device and direct invocation of a generic function, \texttt  {map}, as a kernel without explicit compilation.}}{6}}
\newlabel{py}{{9}{6}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Ace for Researchers}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Active Typechecking and Translation (AT\&T)}{6}}
\@writefile{lol}{\contentsline {lstlisting}{listing9.py}{7}}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces \texttt  {[listing9.py]} A portion of the implementation of OpenCL pointer types implementing subscripting logic using the Ace extension mechanism.}}{7}}
\newlabel{pointers}{{10}{7}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.1.1}Active Typechecking}{7}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.1.2}Active Translation}{7}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Active Backends}{7}}
\newlabel{backends}{{4.2}{7}}
\citation{cave2010comparing}
\citation{conf/cefp/Kennedy09}
\citation{yang2010gpgpu}
\citation{yang2010gpgpu}
\citation{fowler2010domain}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3}Use Cases}{8}}
\@writefile{toc}{\contentsline {paragraph}{Partitioned Global Address Spaces}{8}}
\@writefile{toc}{\contentsline {paragraph}{Other Parallel Abstractions}{8}}
\@writefile{toc}{\contentsline {paragraph}{Domain-Specific Type Systems}{8}}
\@writefile{toc}{\contentsline {paragraph}{Specialized Optimizations}{8}}
\@writefile{toc}{\contentsline {paragraph}{Instrumentation}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.4}Language Frameworks}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.5}Extensible Compilers}{8}}
\citation{Diaconescu-Futatsugi01}
\citation{activelibraries}
\citation{tapl}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.6}Specification Languages}{9}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Conclusion}{9}}
\@writefile{toc}{\contentsline {section}{\numberline {6}Availability}{9}}
\@writefile{toc}{\contentsline {section}{\numberline {7}Acknowledgments}{9}}
\@writefile{toc}{\contentsline {section}{\numberline {8}Background}{9}}
\citation{journals/entcs/BrabrandSV03}
\citation{twelf}
\citation{tapl}
\@writefile{toc}{\contentsline {section}{\numberline {9}Type-Level Specifications in $\lambda _{\text  {A}}$}{10}}
\@writefile{toc}{\contentsline {subsection}{\numberline {9.1}Example: Natural Numbers in $\lambda _{\text  {A}}$}{10}}
\newlabel{sigplanconf@finalpage}{{9.1}{10}}
