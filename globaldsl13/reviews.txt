Dear Alex Potanin,
we are pleased to inform you that your paper entitled Whitespace-Delimited, Type-Directed Parsing for Embedded DSLs has been 
accepted to the GlobalDSL workshop that will take place Tuesday, 2nd July in 
Montpellier.

The camera ready of your paper is due the 10th of June and has to be uploaded 
through easychair. Since the papers will be uploaded into the ACM DL you have to 
follow these rules when formatting it:

 - format your article with the ACM Tighter Alternate style 
(http://www.acm.org/sigs/publications/proceedings-templates). Use the following 
LaTeX commands (or the equivalent if you are not using LaTeX):                                                                       

  \conferenceinfo{GlobalDSL}{'13, Montpellier, France}                             
  \CopyrightYear{2013}                                                        
  \crdata{978-1-4503-2043-6}                                                  

 - use the ACM Computing Classification categories and terms 
(http://www.acm.org/about/class/1998).                               

Please remember that the paper must be presented to the workshop and that the 
early deadline to ECOOP expires by the end of May

See you in Montpellier
The GlobalDSL organizing committe


----------------------- REVIEW 1 ---------------------
PAPER: 2
TITLE: Whitespace-Delimited, Type-Directed Parsing for Embedded DSLs
AUTHORS: Cyrus Omar, Benjamin Chung, Darya Kurilova, Alex Potanin and Jonathan Aldrich


----------- REVIEW -----------
The paper describes an interesting approach, but raises more questions than gives answers. The observation that
shared tokenization leads to simplified scanning is true, but it also restricts the class of languages. The authors
describe later in the paper, that they want to relax this, but it is not described in what way and what the 
consequences are. With respect to the "whitespace-delimited" approach, this in fact prevents the use of
traditional parser generation techniques. I consider this a serious drawback. Another aspect related to ambiguities.
Multiple (embedded) languages may lead to ambiguities during parsing. It is unclear from the paper, whether the
introduction of the types are a way to circumvent this problem or that the "keyword-directed invocation" solves
this problem. The approach to deal with typechecking is interesting, but not new. In [1] an approach to semantic
directed parsing in combination with attribute grammars was presented. In the related work, MPS en Enso are discussed
and the relation with the paper is unclear to me.

Overall an interesting paper, but 

[1] Brand, M.G.J. van den (1992). Pregmatic; A Generator For Incremental Programming Environments. PhD Thesis, Katholieke Universiteit Nijmegen.


----------------------- REVIEW 2 ---------------------
PAPER: 2
TITLE: Whitespace-Delimited, Type-Directed Parsing for Embedded DSLs
AUTHORS: Cyrus Omar, Benjamin Chung, Darya Kurilova, Alex Potanin and Jonathan Aldrich


----------- REVIEW -----------
This paper presents Wyvern which is a parser that is designed and implemented to support the development of integrated DSLs. The motivation for development of integrated DSLs is given and the mechanism is described in overview together with a motivating example.

The paper provides an approach that should be of interest to the workshop participants and addresses an important issue that raises a number of research questions, parsing being one. The work seems to be novel and the authors describe related work. However there are a few other systems that provide similar approaches that might usefully be compared with the Wyvern approach e.g.

(1) http://www.monticore.org
(2) @inproceedings{DBLP:conf/scam/ClarkSW08,
 author    = {Tony Clark and
              Paul Sammut and
              James S. Willans},
 title     = {Beyond Annotations: A Proposal for Extensible Java (XJ)},
 booktitle = {SCAM},
 year      = {2008},
 pages     = {229-238},
 ee        = {http://dx.doi.org/10.1109/SCAM.2008.34},
 crossref  = {DBLP:conf/scam/2008},
 bibsource = {DBLP, http://dblp.uni-trier.de}
}

It would be useful to have a clear idea of the trade-off between non-whitespace/delimited approaches and the one described in the paper. 

In addition the paper motivates the requirement in terms of shared information between integrated DSLs. It is unclear how the approach supports much more than parsing; perhaps difficult to achieve in a short paper. The presentation given in the paper does not really provide a precise description of now the mechanism works, I guess there is a longer version of this paper in development and would hope that any presentation of the material at the workshop would include a bit more detail.


----------------------- REVIEW 3 ---------------------
PAPER: 2
TITLE: Whitespace-Delimited, Type-Directed Parsing for Embedded DSLs
AUTHORS: Cyrus Omar, Benjamin Chung, Darya Kurilova, Alex Potanin and Jonathan Aldrich


----------- REVIEW -----------
This paper presents a new approach for extensible parsers.
Programmers can define the syntax of their embedded DSL in a class
declaration and the syntax is effective within a code block of that
class type.  The code block is specified by indentation.
To avoid ambiguities of syntax, the embedded DSLs must share the
lexer with the host language.

The type directed parsing is a good idea since it provides
composability with respect to the DSL syntax.  Using indentation for
specifying the code block where the DSL syntax is effective would be
good for parsing but the reviewer is not sure that this approach is
also good for programmers.  For example, in Figure 3, the line 4-5:

style:
 myStylesheet

could not be rewritten into:

style: myStylesheet

Is this restriction acceptable in practice?

The paper shows how the grammar is defined (for example, in Figure 4)
but it does not show how the semantics is defined.  In Figure 4,
"EXP of URL" partly refers to the semantics (the type).  How is the type
of an expression in a DSL determined?

Does the system allow subtyping of grammar classes such as ComponentArch?
If it allows subtyping, this might cause ambiguous syntax definitions.

No evaluation on flexibility or simplicity in the paper.
The paper should mention the set of grammar that the proposed approach
can express.  What about the cost of defining DSLs with this approach?

The paper should refer to:

- quasi-quotation in Template Haskell for explicit keyword-directed parsing,

- "Generalized type-based disambiguation of meta programs with
 concrete object syntax (GPCE'05)" for type-based disambiguation.

