\relax 
\citation{Meyerovich:2013:EAP:2509136.2509515,chen05,nguyen2010survey}
\citation{Meyerovich:2012:SDR:2414721.2414724,Meyerovich:2013:EAP:2509136.2509515}
\citation{basili2008understanding}
\citation{cave2010comparing}
\citation{basili2008understanding}
\citation{Politz:2013:PFM:2509136.2509536,python}
\citation{activelibraries}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}}
\newlabel{intro}{{1}{1}}
\citation{opencl11}
\citation{python}
\@writefile{toc}{\contentsline {section}{\numberline {2}Language Design and Usage}{2}}
\newlabel{usage}{{2}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}OpenCL as an Active Library}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Generic Functions}{2}}
\newlabel{genfn}{{2.2}{2}}
\@writefile{lol}{\contentsline {lstlisting}{listing3.py}{2}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {1}{\ignorespaces [\texttt  {listing1\hbox {}.py}] A generic data-parallel higher-order map function targeting OpenCL.}}{2}}
\newlabel{map}{{1}{2}}
\@writefile{lol}{\contentsline {lstlisting}{listing7.py}{2}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {2}{\ignorespaces [\texttt  {listing2\hbox {}.py}] Metaprogramming with Ace, showing how to construct generic functions from abstract syntax trees.}}{2}}
\newlabel{metaprogramming}{{2}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Metaprogramming in Ace}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4}Concrete Functions and Explicit Compilation}{2}}
\citation{opencl11}
\@writefile{lol}{\contentsline {lstlisting}{listing4.py}{3}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {3}{\ignorespaces [\texttt  {listing3\hbox {}.py}] The generic \texttt  {map} function compiled to map the \texttt  {negate} function over two types of input.}}{3}}
\newlabel{compscript}{{3}{3}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {4}{\ignorespaces Compiling \texttt  {listing3\hbox {}.py} using the \texttt  {acec} compiler.}}{3}}
\newlabel{mapc}{{4}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.5}Types}{3}}
\@writefile{lol}{\contentsline {lstlisting}{listing5.cl}{3}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {5}{\ignorespaces [\texttt  {listing3\hbox {}.cl}] The OpenCL file generated by Listing 4\hbox {}.}}{3}}
\newlabel{mapout}{{5}{3}}
\citation{sanner1999python,nguyen2010survey}
\citation{klockner2011pycuda}
\citation{opencl11}
\citation{klockner2011pycuda}
\citation{klockner2011pycuda}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.6}Implicit Compilation and Interactive Execution}{4}}
\newlabel{compenv}{{2.6}{4}}
\newlabel{backend}{{2.6}{4}}
\newlabel{implicit}{{2.6}{4}}
\@writefile{lol}{\contentsline {lstlisting}{listing8.py}{4}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {6}{\ignorespaces [\texttt  {listing6\hbox {}.py}] A full OpenCL program using the \texttt  {clx} Python bindings, including data transfer to and from a device and direct invocation of a generic function, \texttt  {map}.}}{4}}
\newlabel{py}{{6}{4}}
\citation{python}
\citation{marceau2011measuring}
\@writefile{toc}{\contentsline {section}{\numberline {3}Extensibility}{5}}
\newlabel{att}{{3}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Active Types}{5}}
\newlabel{atypes}{{3.1}{5}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.1.1}Dispatch Protocol}{5}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.1.2}Typechecking}{5}}
\@writefile{lol}{\contentsline {lstlisting}{listing9.py}{5}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {7}{\ignorespaces \texttt  {[}in \texttt  {examples/clx.py]} The active type family \texttt  {Ptr} implements the semantics of OpenCL pointer types.}}{5}}
\newlabel{cplx}{{7}{5}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.1.3}Translation}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Active Bases}{6}}
\newlabel{abases}{{3.2}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}Active Targets and Cross-Compilation}{6}}
\newlabel{atargets}{{3.3}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4}Compositional Reasoning}{6}}
\newlabel{safety}{{3.4}{6}}
\citation{pfpl}
\citation{catanzaro2011copperhead}
\@writefile{lol}{\contentsline {lstlisting}{datatypes\textunderscore t.py}{7}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {8}{\ignorespaces \texttt  {[datatypes\_t.py]} An example using statically-typed functional datatypes.}}{7}}
\newlabel{datatypest}{{8}{7}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Expressiveness}{7}}
\newlabel{examples}{{4}{7}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Growing a Statically-Typed Python Inside an Ace}{7}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Recursive Labeled Sums}{7}}
\@writefile{lol}{\contentsline {lstlisting}{datatypes.py}{7}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {9}{\ignorespaces \texttt  {[datatypes.py]} The dynamically-typed Python code generated by running \texttt  {acec datatypes\_t.py}.}}{7}}
\newlabel{datatypes}{{9}{7}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3}Nested Data Parallelism}{7}}
\citation{kale2009charm++}
\citation{kale2009charm++}
\citation{chapel}
\citation{bonachea2002gasnet}
\citation{conf/cefp/Kennedy09}
\citation{erdweg2011sugarj}
\citation{TypedScheme2008}
\citation{activelibraries}
\citation{ScalaMacros2013}
\citation{MorphJ2011}
\citation{OpenJava2000}
\citation{Sheard:1999:UMS}
\citation{Delite2011}
\gdef \LT@i {\LT@entry 
    {2}{80.50706pt}\LT@entry 
    {1}{6.0pt}\LT@entry 
    {2}{132.90816pt}\LT@entry 
    {1}{6.0pt}\LT@entry 
    {1}{36.50066pt}\LT@entry 
    {1}{6.0pt}\LT@entry 
    {1}{46.00436pt}\LT@entry 
    {1}{6.0pt}\LT@entry 
    {1}{54.58151pt}\LT@entry 
    {1}{6.0pt}\LT@entry 
    {1}{62.0064pt}\LT@entry 
    {1}{6.0pt}\LT@entry 
    {1}{49.17256pt}}
\citation{terra}
\citation{activelibraries}
\citation{veldhuizen2000blitz++}
\citation{activelibraries}
\citation{malayeri2009structural}
\citation{scalad}
\citation{vanWijngaarden:Mailloux:Peck:Koster:Sintzoff:Lindsey:Meertens:Fisker:acta:1975}
\citation{Kiczales91}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.4}Product Types}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.5}Distributed Programming}{8}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {4.5.1}Units of Measure}{8}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Related Work}{8}}
\newlabel{related}{{5}{8}}
\@writefile{lol}{\contentsline {lstlisting}{ooclxfp.py}{8}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {10}{\ignorespaces \texttt  {[ooclxfp.py]} An example combining structs and immutable records using a prototype-based object system, cross-compiled to C99. Uses Python 3 argument annotations.}}{8}}
\newlabel{ooclxfppy}{{10}{8}}
\@writefile{lol}{\contentsline {lstlisting}{ooclxfp.c}{8}}
\@writefile{lop}{\contentsline {codelisting}{\numberline {11}{\ignorespaces \texttt  {[ooclxfp.c]} The C99 code generated by running \texttt  {acec ooclxfp.py}.}}{8}}
\newlabel{ooclxfpc}{{11}{8}}
\citation{erdweg2013state}
\citation{cordy1992hints}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Comparison to related approaches to language-internal extensibility.}}{9}}
\newlabel{relatedtable}{{1}{9}}
\@writefile{toc}{\contentsline {section}{\numberline {6}Discussion}{9}}
\newlabel{discussion}{{6}{9}}
\bibstyle{abbrv}
\bibdata{../research}
\bibcite{python}{{1}{}{{}}{{}}}
\bibcite{basili2008understanding}{{2}{}{{}}{{}}}
\bibcite{bonachea2002gasnet}{{3}{}{{}}{{}}}
\bibcite{ScalaMacros2013}{{4}{}{{}}{{}}}
\bibcite{catanzaro2011copperhead}{{5}{}{{}}{{}}}
\bibcite{cave2010comparing}{{6}{}{{}}{{}}}
\bibcite{Delite2011}{{7}{}{{}}{{}}}
\bibcite{chapel}{{8}{}{{}}{{}}}
\bibcite{chen05}{{9}{}{{}}{{}}}
\bibcite{cordy1992hints}{{10}{}{{}}{{}}}
\bibcite{terra}{{11}{}{{}}{{}}}
\bibcite{erdweg2011sugarj}{{12}{}{{}}{{}}}
\bibcite{erdweg2013state}{{13}{}{{}}{{}}}
\bibcite{opencl11}{{14}{}{{}}{{}}}
\bibcite{pfpl}{{15}{}{{}}{{}}}
\bibcite{MorphJ2011}{{16}{}{{}}{{}}}
\bibcite{kale2009charm++}{{17}{}{{}}{{}}}
\bibcite{conf/cefp/Kennedy09}{{18}{}{{}}{{}}}
\bibcite{Kiczales91}{{19}{}{{}}{{}}}
\bibcite{klockner2011pycuda}{{20}{}{{}}{{}}}
\bibcite{malayeri2009structural}{{21}{}{{}}{{}}}
\bibcite{marceau2011measuring}{{22}{}{{}}{{}}}
\bibcite{Meyerovich:2012:SDR:2414721.2414724}{{23}{}{{}}{{}}}
\bibcite{Meyerovich:2013:EAP:2509136.2509515}{{24}{}{{}}{{}}}
\bibcite{nguyen2010survey}{{25}{}{{}}{{}}}
\bibcite{scalad}{{26}{}{{}}{{}}}
\bibcite{Politz:2013:PFM:2509136.2509536}{{27}{}{{}}{{}}}
\bibcite{sanner1999python}{{28}{}{{}}{{}}}
\bibcite{Sheard:1999:UMS}{{29}{}{{}}{{}}}
\bibcite{OpenJava2000}{{30}{}{{}}{{}}}
\bibcite{TypedScheme2008}{{31}{}{{}}{{}}}
\bibcite{vanWijngaarden:Mailloux:Peck:Koster:Sintzoff:Lindsey:Meertens:Fisker:acta:1975}{{32}{}{{}}{{}}}
\bibcite{veldhuizen2000blitz++}{{33}{}{{}}{{}}}
\bibcite{activelibraries}{{34}{}{{}}{{}}}
\providecommand\NAT@force@numbers{}\NAT@force@numbers
\newlabel{sigplanconf@finalpage}{{6}{10}}
