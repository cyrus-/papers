We thank the reviewers for their detailed and insightful comments! We would like to correct some errors that appear to have been made in the reviews and provide requested clarifications. Due to the unusual number of reviews, we hope the committee does not mind that we have exceeded the 500 word soft limit proportionally. The items most relevant to each reviewer are summarized below. 

R1 - 1, 5, 6
R2 - 1, 5, 6, 9
R3 - 1, 2, 5, 6, 7
R4 - 2, 5, 6
R5 - 2, 3, 4, 5, 6, 8

Corrections:
1. R1 describes Ace as providing "syntax-directed" mechanisms, which would indeed be "routine". This is incorrect -- Ace uses a _type-directed_ mechanism to determine the semantics of an expression. That is, there is _not_ a direct mapping from syntax to semantics; the mapping depends on logic associated with the type of a designated subexpression. This represents an inversion of control relative to conventional syntax-directed mechanisms. As R2 and R3 suggest by their characterizations of it, this is the main novel technical innovation Ace introduces. 

2. R5 states that Ace's types are not "types in a conventional sense at all". This is incorrect -- Ace's types are constructs that statically classify expressions and are erased at run-time. There is no "dynamic typechecking" of Ace function bodies. Our theoretical work [1] connects our mechanism to type-level computation, further emphasizing that active types are clearly static types. This paper also contains a much simpler example, as requested by R4. We will take care to emphasize this in the final version. 

Note to R3: we use the word "form" for the syntactic form (e.g. Attribute, BinOp); "type" is reserved for static types.

3. R5 states that "Lisp-style macros are compositional" in the sense that we use the word. Figure 1 did in fact state this (though there are subtleties, see 5 below). Note that macros do not permit non-local type system extensions. 

4. R5 is incorrect that "all of the related work covered in Figure 1 is compositional". Systems like Qi/Shen, Typed Racket and Xroma allow extension writers to add to a "bag of rules" and so do not prevent the introduction of conflicting rules that could cause problems by, e.g., giving a type to constructs that another extension wished to classify as ill-typed or by violating previously maintained invariants (e.g. by violating the representational consistency check that Ace uses, see Sec. 3.1.3).

Clarifications:
5. We do agree with the reviewers that our explanation of extension composition in Ace could have been clearer and made in one place in the paper. There are two facets that we handle: 
  a) "non-interference" -- each extension has _exclusive_ control over a set of expressions, per the dispatch protocol
  b) "compositional reasoning" -- each extension can assume that expressions of another type are representationally consistent (have a consistent type in the target language, as determined by the trans_type method, cf. Sec. Sec. 3.1.3), making it possible to reason modularly about well-typedness of the translation. 

Both hinge on our novel type-directed dispatch protocol and our use of active types. We will take care to clarify this issue. A fully-rigorous treatment of this topic requires a type theoretic formulation beyond the scope of this paper. Such a treatment can be found in [1].

6. Several reviewers (R1, R3, R5) had questions about binding and scope. We concur that this could be discussed in more detail. As stated in Sec. 3.2, the active base controls local variable binding and sets up the typing context. The context can be structured as the base sees fit, but it is typically a dictionary mapping variable names to (active) types. Active types do not access it directly; recursing on a subexpression that contains variables will eventually delegate to the active base to extract type information. 

6.1. Active types can add new contexts other than typing contexts to the "context" object by adding a new attribute to it upon first use of a construct that requires it. There is no guarantee that other types cannot manipulate this context, but if a globally unique attribute name is used, this will not occur accidentally (see 7 below); the new context will be statically threaded through the program unchanged until the next construct that intentionally accesses it is encountered. We hope to pursue a cleaner foundation for custom contexts in future work.

6.2. References to variables that are not local, like the names of other functions in scope, can also be handled by the active base by reference to the Python environment that the function is defined within. Ace captures this when a generic function is defined (we inadvertently did not state this). 

The special Python attribute ace_type can be used to designate an Ace type for an object in the Python environment. That type must determine how to lift this value from compile-time to run-time given the active target. This is how the OpenCL bindings in 2.6 work -- the ace_type attribute of OpenCL buffer objects (e.g. d_input) is an instance of clx.TypedBuffer parameterized by run-time type information available from the numpy object that was used to create the buffer (e.g. the numpy dtype attribute). R3 is correct that this interactive mode of use implies an "intermingling" of Python's dynamic semantics and Ace's static semantics -- this can be seen as a form of staged compilation (and we will describe it more clearly as such in Sec. 2.6).

6.3. Handling of nested function definitions (and lambdas) is also delegated entirely to the active base. For example, an active base supporting a C target could support a nested OpenCL-based function by using the OpenCL host API internally to compile it.

7. R3 asks for a description of a "well-behaved extension". These are extensions that do not use Python's metaprogramming facilities to modify other active types/bases or core Ace data structures directly, and that do not attempt to modify the base's typing context or contexts defined by other extensions. We will discuss this alongside our discussion of composability in the final version.

8. R5 states that LMS is the "system most similar" to Ace. Ace permits type system extensions while LMS uses Scala's monolithic (albeit expressive) type system directly. It is thus only comparable to the translation functionality Ace provides. We cited Delite but not LMS under "cross-compilation". We will cite both in the final version and discuss this distinction further in the text.

9. We are sympathetic to worries that the examples in Sec. 4 are not fully detailed. This is due to the 10-page limit. We will decrease the number of non-code examples to increase the level of detail for the ones with code in the final version. R2 suggests that we first develop more experience with Ace. We emphasize that we have developed a large number of extensions, including a full implementation of an industrial language -- OpenCL -- using Ace. In addition, though not discussed in this paper, we have developed a large distributed scientific simulation framework running on clusters of GPUs that has been used to conduct neurobiological circuit simulations (see Sec. 5 of [2]). Finally, several course and undergraduate research projects have now used Ace as well (e.g. [3]).

[1] https://github.com/cyrus-/papers/blob/master/esop14/att-esop14.pdf?raw=true
[2] https://github.com/cyrus-/papers/blob/master/sc13/ace.pdf?raw=true
[3] http://src.acm.org/2013/NathanFulton.pdf
