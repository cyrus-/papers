{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red255\green255\blue255;\red0\green57\blue198;
}
\margl1440\margr1440\vieww13900\viewh8560\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs26 \cf2 \cb3 ------------------------ Submission 548, Review 1 ------------------------\
\
Title: Active Code Completion\
\
\
The Review\
\
\'a0 The paper presents motivation for, an implementation of, and a small\
\'a0 evaluation of the concept of active code completion, which extends the\
\'a0 notion of a code completion menu to a more heavily graphical menu that\
\'a0 also helps developers invoke code. In the motivation, the paper describes\
\'a0 a large survey where experienced developers were asked about their\
\'a0 opinions of various active code completion mockups. In the\
\'a0 implementation, the authors created active code completion palettes for\
\'a0 color choosing and regular expression generation. In the evaluation, the\
\'a0 paper had 4 developers do several tasks without active code completion\
\'a0 and 3 do it with; the exclusively qualitative results suggest that active\
\'a0 code completion generally made those tasks easy.\
\
\'a0 Strengths:\
\'a0 - The paper makes a strong case that the technique is practically useful\
\'a0 in some contexts.\
\'a0 - The paper uses a unique (to my knowledge, for SE research anyway) and\
\'a0 effective methodology in the survey section for generating potential use\
\'a0 cases of active code completion and generating design guidelines.\
\'a0 - The evaluations were conducted in a reasonable and appropriate manner\
\'a0 - The paper is well written.\
\
\'a0 Points for improvement:\
\
\'a0 - Don\'92t press your luck with the page limits!\
\'a0 - I\'92d like to see the a bit more thought into the \'93theory\'94 of these tools\
\'a0 -- what, in general, is active code completion good for? As the paper\
\'a0 stands now, it seems like, \'93we had a nugget of an idea, and we let people\
\'a0 on the internet go nuts with it.\'94 The examples are interesting and\
\'a0 everything, but if I\'92m a toolsmith, how do I know if my problem is\
\'a0 something that can be solved with active code completion? In other words,\
\'a0 what general problem does active code completion solve?\
\'a0 - The suggestion of automatically generating code for adding elements to\
\'a0 collections strikes me as similar to this paper:\
\'a0 {\field{\*\fldinst{HYPERLINK "http://dl.acm.org/citation.cfm?id=1869521"}}{\fldrslt \cf4 \ul \ulc4 http://dl.acm.org/citation.cfm?id=1869521}}\
\'a0 - The generalizable conclusions that can be drawn from the third study\
\'a0 seem fairly limited; in the future, I\'92d like to see more participants.\
\
Questions to the Authors\
\
\'a0 Code completion is generally implemented as a popup that appears and\
\'a0 disappears easily, intended for only minimal/constrained clicking and\
\'a0 typing. For instance, if you click outside of an auto-complete popup,\
\'a0 typically the popup disappears. The interaction with active code\
\'a0 completion is much more sophisticated, and it seems like the user would\
\'a0 get frustrated because the palettes easily disappear. How does your\
\'a0 implementation deal with this?\
\
------------------------ Submission 548, Review 2 ------------------------\
\
Title: Active Code Completion\
\
\
The Review\
\
\'a0 This paper describes the conception, the implementation and evaluation of\
\'a0 Graphite, a system to support active code completion, and specifically to\
\'a0 support highly specialized code generation interfaces (palettes) such as\
\'a0 the creation of regular expression, queries in various query languages\
\'a0 such as SQL or XQuery, graphical elements, and pieces of domain-specific\
\'a0 syntax. The authors first describe a survey conducted to motivate the\
\'a0 research and development work, then they describe the design criteria,\
\'a0 use cases, and tool design of Graphite, and finally they report a user\
\'a0 study conducted with 7 PhD students aimed at evaluating the usefulness of\
\'a0 Graphite.\
\
\'a0 On the positive, side, I appreciate very much the methodology you have\
\'a0 followed in this work, since its conception. You first motivated the need\
\'a0 with a survey, then carefully analyzed the tool use cases and design\
\'a0 goals, then you designed and implemented the tool, and finally you\
\'a0 evaluated (as people should normally do) with developers (although the\
\'a0 number and kinds of subjects concerns me, and although you did not\
\'a0 carefully report results of this study).\
\
\'a0 The main doubt I have on this paper is that I'm really not sure how a\
\'a0 general purpose IDE would be able to support a set of palette that is\
\'a0 wide enough to satisfy the developers' need. One possibility is of course\
\'a0 to choose palette for things that are widely used (I'm thinking about\
\'a0 regular expressions and some query languages, less sure about graphical\
\'a0 elements). Another possibility is that such active completion mechanism\
\'a0 is incorporated into a specific-purpose editor / DSL editor. However, in\
\'a0 this case, I'm not completely sure this is really a novel idea. Just to\
\'a0 make an example, the color palette you mentioned in the intro is\
\'a0 something that WYSIWYG HTML editors implement already, while for example\
\'a0 for query languages there are some widely used generators (in some cases\
\'a0 detached from the IDE, but I don't see the problem).\
\
\'a0 What I really think could be an added value of your work, but\
\'a0 unfortunately is not well explained in the paper, is the "Palette\
\'a0 Discovery" you described in section V-C, i.e., the possibility of\
\'a0 associating a palette, using appropriate annotations, whenever a type in\
\'a0 a programming language is defined. Unfortunately, this is just briefly\
\'a0 mentioned at page 7, while it would have been great to have much more\
\'a0 detail on that (while, see below, some other sections are rather\
\'a0 uninteresting).\
\
\'a0 As I said above, I appreciate the presence of the survey, however I also\
\'a0 found the questions being asked too narrow, because they are explicitly\
\'a0 tied to specific palette (SQL, regular expressions, colors) while people\
\'a0 could have needed other kinds of palettes.\
\
\'a0 Regarding the organization of the paper, while I liked the methodology, I\
\'a0 also think that many of the details in Section III (design criteria) are\
\'a0 not necessarily interesting because they really affect the GUI design and\
\'a0 the user experience of Graphite (here it would be more interesting to\
\'a0 discuss the palette needs and how to help people in selecting the\
\'a0 palettes). The same considerations apply to Section V-D (Design\
\'a0 trade-offs).\
\
\'a0 Section IV is, instead, useful, but it also confirms that there are too\
\'a0 many cases to contemplate, and unless you have a mechanism to provide a\
\'a0 flexible definition a palette from the user side (but I guess you need a\
\'a0 language for that, I would be interested for example to see how the\
\'a0 palette definition for SQL or for regular expressions would look like),\
\'a0 it would not be realistic to support all them in a tool and, if you're\
\'a0 going to design a DSL editor, then probably the considerations I made\
\'a0 above apply also. After reading section V-E, (i.e., palettes for regular\
\'a0 expression) it's quite difficult to think how this can easily be\
\'a0 generalized.\
\
\'a0 Last, but not least, the user study has many serious problems. While I\
\'a0 don't care that it's done with students (ok!) I'm very concerned that\
\'a0 they did not know regular expressions and that they learned regular\
\'a0 expressions during the study. To tell you my personal case, when I was\
\'a0 undergrad I used to write equations using a WYSIWYG Equation Editor in a\
\'a0 popular Word Processor. Nowadays I would never use it again as I find\
\'a0 writing equations in LaTeX incredibly faster. In other words, I doubt\
\'a0 expert developers would have the same experience.\
\'a0 A good user study would include both expert and non expert developers,\
\'a0 equally distributed to control and experimental group, and the analysis\
\'a0 of results would contemplate the analysis of interaction between the main\
\'a0 factor (use or not of Graphite) with the subjects' skill. In your\
\'a0 experiment, due to the lack of proper skills, the control group was\
\'a0 obviously penalized. Also, as you mentioned in Section VI-B this produced\
\'a0 a tangible learning effect.\
\'a0 Also, I think 7 participants are too few, and I would have preferred to\
\'a0 have a quantitative analysis of results, though in this case due to the\
\'a0 limited number of subjects I understand that a statistical analysis would\
\'a0 not have much sense.\
\
\'a0 Related work: the following papers are worthwhile of being mentioned:\
\'a0 - Daqing Hou, David M. Pletcher: An evaluation of the strategies of\
\'a0 sorting, filtering, and grouping API methods for Code Completion. ICSM\
\'a0 2011: 233-242\
\'a0 - David M. Pletcher, Daqing Hou: BCC: Enhancing code completion for\
\'a0 better API usability. ICSM 2009: 393-394\
\
\'a0 Other comments:\
\'a0 Figure 2: shouldn't "I read on the user manual" \'a0be a possible answer as\
\'a0 well?\
\'a0 Page 8 "2) Color selection: We omit..." please just drop this, it's not\
\'a0 necessary.. maybe if you wish say at the beginning of section V-E that\
\'a0 due to the lack of space you only discuss the regular expression\
\'a0 palettes.\
\'a0 Section VI-D: you have foreseen development tasks in your experiment One\
\'a0 question I have here is whether the tool would also be useful in\
\'a0 maintenance tasks, i.e., when palette-related code (e.g. SQL queries or\
\'a0 regular expressions) need to be changed during maintenance.\
\
Questions to the Authors\
\
\'a0 1) Let us suppose I want to implement your palettes in a DSL editor.\
\'a0 Please clarify me the difference with palettes such as the ones available\
\'a0 in WYSIWYG HTML editors.\
\'a0 2) Please comment on how, and in what cases, \'a0your palettes can be user\
\'a0 defined by means of configuration files, as briefly mentioned in Section\
\'a0 V-C\
\'a0 3) Please comment on the threat to validity of your user study related to\
\'a0 the (lack of) skills of your participants.\
\
------------------------ Submission 548, Review 3 ------------------------\
\
Title: Active Code Completion\
\
\
The Review\
\
\'a0 This paper proposes the technique of \'93active code completion\'94, a\
\'a0 generalized technique for supporting code completion palettes customized\
\'a0 for a given API. \'a0 The palettes are used to generate code based on API\
\'a0 and parameter selections by the developer. \'a0The research is prefaced with\
\'a0 an extensive survey (answered by over 470 experienced developers) that\
\'a0 solicited developer opinions on an early prototype of the idea and also\
\'a0 gave insights on the requirements for such an advanced tool integrated in\
\'a0 the IDE. \'a0 Although the survey may be a bit leading in terms of the\
\'a0 feedback solicited (the survey is still available online), I think this\
\'a0 is an interesting way to gain input from a broad set of developers on how\
\'a0 code completion code completion support could be improved. \'a0The fact that\
\'a0 so many developers answered (and completed) the survey indicated that the\
\'a0 researchers have struck a chord in terms of the tool they are proposing.\
\
\'a0 Based on the results from the survey (as well as informal interviews with\
\'a0 developers) the researchers describe a number of requirements for the\
\'a0 tool, some of which can be potentially considered informative in the\
\'a0 context of other tool support integrated in the IDE. \'a0 They then describe\
\'a0 the architecture for a tool and framework (called Graphite) for\
\'a0 customizing palettes for integration with code completion support in the\
\'a0 IDE. \'a0The tool can be viewed through a video and the source code for the\
\'a0 tool is available. \'a0 The authors develop two palettes with Graphite,\
\'a0 although only describe one in the paper. \'a0 They finally describe a small\
\'a0 comparative user study to compare the use of the palette with standard\
\'a0 techniques. \'a0The user study was a between subjects design (which makes\
\'a0 sense from a controlled study perspective) but there were only 7\
\'a0 participants. \'a0Given the small number of participants, this study is best\
\'a0 referred to as a pilot study. \'a0Alternatively, the researchers could have\
\'a0 conducted an exploratory study (rather than controlled) with the 7 users\
\'a0 to evaluate the usability of the tool. \'a0 \'a0I was rather surprised that\
\'a0 they instead gave qualitative insights from a study clearly designed for\
\'a0 a larger population. \'a0 Would the authors be willing to change how the\
\'a0 study is presented?\
\
Questions to the Authors\
\
\'a0 Did you evaluate the survey responses to see if there are differences\
\'a0 between the professional and student responses? \'a0 This is useful to\
\'a0 ascertain in terms of validity of the later designed user study.\
\
\'a0 How much effort is required to create the palette? \'a0Will library API\
\'a0 developers take the effort to create these palettes?\
\
\'a0 In terms of the survey, no test for correlations between language/IDE\
\'a0 experience and the answers was reported. \'a0 Should these be considered? It\
\'a0 would be helpful if the items on the five point scale would be reported,\
\'a0 because it is for example not clear where \'91familiar\'92 is in the range from\
\'a0 \'91none\'92 to \'91expert\'92.\
\
\'a0 A colleague pointed me to some related literature that you do not\
\'a0 reference or mention in your paper, are you familiar with these works?\
\'a0 How do they relate to your research?\
\
\'a0 Features available in IDEs already (such as code completion templates in\
\'a0 Eclipse, domain specific assistance in Jetbrains MPS) are not mentioned,\
\'a0 and work on DSLs is not considered. The following papers, for example,\
\'a0 seem to be related work:\
\
\'a0 Towards a Generic Infrastructure for Framework-Speci&#64257;c Integrated\
\'a0 Development Environment Extensions\
\'a0 Herman Hon Man Lee, Micha&#322; Antkiewicz, Krzysztof Czarnecki\
\
\'a0 Towards A Better Code Completion System by API Grouping, Filtering, and\
\'a0 Popularity-Based Ranking\
\'a0 Daqing Hou David M. Pletcher\
\
\'a0 Code Completion From Abbreviated Input\
\'a0 Sangmok Han, David R. Wallace, and Robert C. Miller\
}