We thank the reviewers for their thorough critiques and thoughtful questions.  

R1
Clicking outside of a palette does not dismiss it as palettes are modal dialogs. They are also easy to reinvoke (III-C); this also addresses R3's concern about maintenance. We will make this clearer in Sec. V.
 
R2 1&2), R3 2)
All palettes need not be created by the IDE designer. Sec. V explains that end-users or third parties can define new palettes using ordinary web languages (V-A) with our simple API (V-B). These are associated with classes via a code annotation or in the settings dialog (V-C; see video). A minimal palette can be defined with 2 lines of code (see video). Web-based tools could also be adapted into palettes (e.g. the regex tools mentioned in the pilot study). This is in contrast to editors that feature a fixed set of palettes, such as HTML editors.

R2 3) & R1,2,3 comments 
Reviewers expressed some hesitation about the study’s size. Its purpose was to gather proof-of-concept data comparing control and palette-aided behavior. As R3 helpfully suggests, we will present it as a "pilot study." All participants had prior experience with both Java and regular expressions -- they were not learning these during the study. They were, however, all somewhat rusty on the details of the API. We chose a between-subjects design to minimize the threat of this learning effect. We will make the pilot study’s scope and limitations more explicit.

R3
1) Students were slightly less likely to use external tools (cf. Fig. 2). The difference for the regex case was 13%. As we noted, the control group subjects did not make extensive use of external tools, and we will note this potential external threat.
3) 97% of participants indicated at least "very familiar" for >=1 programming language (II-B), so we do not have enough data to distinguish between novice and expert responses. We will include the scale, currently available via the survey link.
4) Lee+ discuss a DSL for creating specialized full IDE extensions. Our solution is more modular, allowing palettes to be distributed alongside relevant code. We will highlight this and other differences in the final version. The other references are similar to those in the intro, and we will incorporate them there.

Misc.
- R1 asks for a simpler statement of purpose, to complement Sec. IV. Our purpose is to provide a general mechanism for integrating code generation tools directly into a type-aware editor, to improve ease of use and discovery. We will supplement our brief discussion in the intro with further discussion in the conclusion.
- The conclusion inadvertently spilled onto the next page - this will be corrected by incorporating R2's suggestions to shorten III and V-D.
