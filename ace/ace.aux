\relax 
\citation{howison2011scientific}
\citation{hannay2009scientists}
\citation{hannay2009scientists}
\citation{segal2007some}
\citation{nguyen2010survey}
\citation{4222616}
\citation{basili2008understanding}
\citation{basili2008understanding}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{\thepage }}
\citation{xxx}
\@writefile{toc}{\contentsline {section}{\numberline {2}The Design of Ace}{\thepage }}
\newlabel{highlevel}{{2}{\thepage }}
\@writefile{lol}{\contentsline {lstlisting}{hello.py}{\thepage }}
\@writefile{lop}{\contentsline {codelisting}{\numberline {1}{\ignorespaces \texttt  {[hello.py]} A basic Ace program demonstrating the two-phase structure of Ace programs and libraries.}}{\thepage }}
\newlabel{hello}{{1}{\thepage }}
\@writefile{lop}{\contentsline {codelisting}{\numberline {2}{\ignorespaces Compiling \texttt  {hello.py} using the \texttt  {acec} compiler.}}{\thepage }}
\newlabel{helloout}{{2}{\thepage }}
\@writefile{toc}{\contentsline {section}{\numberline {3}Usage of Ace}{\thepage }}
\newlabel{usage}{{3}{\thepage }}
\@writefile{toc}{\contentsline {section}{\numberline {4}Active Typechecking and Translation}{\thepage }}
\newlabel{att}{{4}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Active Translation}{\thepage }}
\newlabel{translation}{{4.1}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Use Cases}{\thepage }}
\newlabel{usecases}{{4.2}{\thepage }}
\@writefile{toc}{\contentsline {section}{\numberline {5}Case Study}{\thepage }}
\newlabel{casestudy}{{5}{\thepage }}
\@writefile{toc}{\contentsline {section}{\numberline {6}Related Work}{\thepage }}
\newlabel{related}{{6}{\thepage }}
\@writefile{toc}{\contentsline {section}{\numberline {7}Discussion}{\thepage }}
\newlabel{discussion}{{7}{\thepage }}
\@writefile{toc}{\contentsline {section}{\numberline {8}Structure and Usage}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.1}Example 1: Hello, World!}{\thepage }}
\@writefile{lol}{\contentsline {lstlisting}{listing3.py}{\thepage }}
\@writefile{lop}{\contentsline {codelisting}{\numberline {3}{\ignorespaces [\texttt  {listing3\hbox {}.py}] A generic data-parallel higher-order map function written using the OpenCL user module.}}{\thepage }}
\newlabel{map}{{3}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.2}Example 2: Higher-Order Map for OpenCL}{\thepage }}
\@writefile{lol}{\contentsline {lstlisting}{listing4.py}{\thepage }}
\@writefile{lop}{\contentsline {codelisting}{\numberline {4}{\ignorespaces [\texttt  {listing4\hbox {}.py}] The generic \texttt  {map} function compiled to map the \texttt  {add5} function over two types of input.}}{\thepage }}
\newlabel{mapadd5dbl}{{4}{\thepage }}
\@writefile{lol}{\contentsline {lstlisting}{listing5.cl}{\thepage }}
\@writefile{lop}{\contentsline {codelisting}{\numberline {5}{\ignorespaces [\texttt  {listing5\hbox {}.cl}] The OpenCL code generated by running \texttt  {acec listing2.py}.}}{\thepage }}
\newlabel{mapout}{{5}{\thepage }}
\citation{opencl}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.3}Types as Metalanguage Objects}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.4}Type Propagation and Higher-Order Functions}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.5}Type Inference}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.6}Annotation and Extension Inference}{\thepage }}
\citation{pyopencl}
\citation{pyopencl}
\@writefile{lol}{\contentsline {lstlisting}{listing6.py}{\thepage }}
\@writefile{lop}{\contentsline {codelisting}{\numberline {6}{\ignorespaces \texttt  {[listing6.py]} A function demonstrating whole-function type inference when multiple values with differing types are assigned to a single variable.}}{\thepage }}
\newlabel{inference}{{6}{\thepage }}
\@writefile{lol}{\contentsline {lstlisting}{listing7.py}{\thepage }}
\@writefile{lop}{\contentsline {codelisting}{\numberline {7}{\ignorespaces [\texttt  {listing7.py}] Metaprogramming with Ace, showing how to construct generic functions from both strings and abstract syntax trees, and how to manipulate syntax trees at compile-time.}}{\thepage }}
\newlabel{metaprogramming}{{7}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.7}Metaprogramming in Ace}{\thepage }}
\@writefile{lol}{\contentsline {lstlisting}{listing8.py}{\thepage }}
\@writefile{lop}{\contentsline {codelisting}{\numberline {8}{\ignorespaces [\texttt  {listing8\hbox {}.py}] A full OpenCL program using the \texttt  {Ace.OpenCL} Python bindings, including data transfer to and from a device and direct invocation of a generic function, \texttt  {map}, as a kernel without explicit compilation.}}{\thepage }}
\newlabel{py}{{8}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.8}Direct Invocation from Python}{\thepage }}
\newlabel{direct}{{8.8}{\thepage }}
\citation{pyopencl}
\@writefile{toc}{\contentsline {section}{\numberline {9}Ace for Researchers}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {9.1}Active Typechecking and Translation (AT\&T)}{\thepage }}
\@writefile{lol}{\contentsline {lstlisting}{listing9.py}{\thepage }}
\@writefile{lop}{\contentsline {codelisting}{\numberline {9}{\ignorespaces \texttt  {[listing9.py]} A portion of the implementation of OpenCL pointer types implementing subscripting logic using the Ace extension mechanism.}}{\thepage }}
\newlabel{pointers}{{9}{\thepage }}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {9.1.1}Active Typechecking}{\thepage }}
\citation{cave2010comparing}
\citation{conf/cefp/Kennedy09}
\citation{yang2010gpgpu}
\citation{yang2010gpgpu}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {9.1.2}Active Translation}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {9.2}Active Backends}{\thepage }}
\newlabel{backends}{{9.2}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {9.3}Use Cases}{\thepage }}
\@writefile{toc}{\contentsline {paragraph}{Partitioned Global Address Spaces}{\thepage }}
\@writefile{toc}{\contentsline {paragraph}{Other Parallel Abstractions}{\thepage }}
\@writefile{toc}{\contentsline {paragraph}{Domain-Specific Type Systems}{\thepage }}
\@writefile{toc}{\contentsline {paragraph}{Specialized Optimizations}{\thepage }}
\@writefile{toc}{\contentsline {paragraph}{Instrumentation}{\thepage }}
\citation{neurobook}
\citation{klockner2011pycuda}
\@writefile{toc}{\contentsline {section}{\numberline {10}Case Study: Neurobiological Circuit Simulation}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {10.1}Background}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {10.2}The {\sf  cl.egans} Simulation Library}{\thepage }}
\citation{activelibraries}
\citation{malayeri2009structural}
\citation{Chakravarty:2005:ATC}
\citation{conf/pldi/Chlipala10}
\citation{conf/cefp/SheardL07}
\citation{conf/icfp/ChenX05}
\citation{conf/esop/ConditHAGN07}
\citation{vanWijngaarden:Mailloux:Peck:Koster:Sintzoff:Lindsey:Meertens:Fisker:acta:1975}
\citation{Kiczales91}
\citation{mccarthy1978history}
\citation{Sheard:1999:UMS}
\citation{TatM:OpenJCBMSJ}
\citation{SheardPeytonJones:Haskell-02}
\citation{Sheard:1999:UMS}
\citation{fowler2010domain}
\@writefile{lol}{\contentsline {lstlisting}{listing10.py}{\thepage }}
\@writefile{lop}{\contentsline {codelisting}{\numberline {10}{\ignorespaces \texttt  {[listing10.py]} An example of a nested simulation tree, showing that specifying a simulation is both simple and modular. The first argument to the constructor specifies each node's parent.}}{\thepage }}
\newlabel{spec}{{10}{\thepage }}
\@writefile{lol}{\contentsline {lstlisting}{listing11.py}{\thepage }}
\@writefile{lop}{\contentsline {codelisting}{\numberline {11}{\ignorespaces \texttt  {[listing11.py]} An example of a hook that inserts code and also inserts new, nested hooks for downstream simulation nodes below that.}}{\thepage }}
\newlabel{impl}{{11}{\thepage }}
\@writefile{toc}{\contentsline {section}{\numberline {11}Related Work}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {11.1}Active Libraries in Ace}{\thepage }}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {11.1.1}Structural Polymorphism}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {11.2}Type-Level Computation}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {11.3}Run-Time Indirection}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {11.4}Term Rewriting Systems}{\thepage }}
\citation{Diaconescu-Futatsugi01}
\citation{activelibraries}
\@writefile{toc}{\contentsline {subsection}{\numberline {11.5}Language Frameworks}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {11.6}Extensible Compilers}{\thepage }}
\@writefile{toc}{\contentsline {subsection}{\numberline {11.7}Specification Languages}{\thepage }}
\@writefile{toc}{\contentsline {section}{\numberline {12}Conclusion}{\thepage }}
\@writefile{toc}{\contentsline {section}{\numberline {13}Availability}{\thepage }}
\@writefile{toc}{\contentsline {section}{\numberline {14}Acknowledgments}{\thepage }}
\bibstyle{IEEEtran}
\bibdata{../research}
\bibcite{howison2011scientific}{1}
\bibcite{hannay2009scientists}{2}
\bibcite{segal2007some}{3}
\bibcite{nguyen2010survey}{4}
\bibcite{4222616}{5}
\bibcite{basili2008understanding}{6}
\bibcite{activelibraries}{7}
\bibcite{cave2010comparing}{8}
\bibcite{conf/cefp/Kennedy09}{9}
\bibcite{yang2010gpgpu}{10}
\bibcite{klockner2011pycuda}{11}
\bibcite{malayeri2009structural}{12}
\bibcite{Chakravarty:2005:ATC}{13}
\bibcite{conf/pldi/Chlipala10}{14}
\bibcite{conf/cefp/SheardL07}{15}
\bibcite{conf/icfp/ChenX05}{16}
\bibcite{conf/esop/ConditHAGN07}{17}
\bibcite{vanWijngaarden:Mailloux:Peck:Koster:Sintzoff:Lindsey:Meertens:Fisker:acta:1975}{18}
\bibcite{Kiczales91}{19}
\bibcite{mccarthy1978history}{20}
\bibcite{Sheard:1999:UMS}{21}
\bibcite{TatM:OpenJCBMSJ}{22}
\bibcite{SheardPeytonJones:Haskell-02}{23}
\bibcite{fowler2010domain}{24}
\bibcite{Diaconescu-Futatsugi01}{25}
\@writefile{toc}{\contentsline {section}{\numberline {15}References}{\thepage }}
