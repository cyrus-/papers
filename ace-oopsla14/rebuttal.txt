We thank the reviewers for their insights!

-- Corrections
-R1 mischaracterizes Ace as a "type system for Python", when it is rather a typed language inside Python. It would not be possible to externally validate it by conducting a "case study to type check Python programs" (other than against dyn!)

The strongest external validation would require adoption by a variety of extension providers, followed by adoption of their extensions by clients to refactor (not just annotate) their applications. This paper is the first component of this research program: it introduces the mechanism to extension providers. Thus, it should suffice to show that our mechanism is useful to them with a variety of non-trivial type systems designed by others and not together expressible in existing languages (Sec2+see below).

-R1, by "not reading [Sec3] carefully", mischaracterizes the mechanism as "standard". Novelty is directly addressed by the bullet points leading Sec3. The remainder shows control flow passing between the compiler (Listing9) and libraries (Listings 8+10) in a type-directed rather than syntax-directed (standard) manner. We can omit some details if requested, but Sec3 details several core technical contributions and should be read as such.

-R1+R3: It _is_ possible to use, e.g., linear contexts if the base initializes them. The limitation is more subtle: they cannot be initialized by tycons, thus coupling some advanced uses to specific bases.

-R1: We only aim to enable analyses expressible as bidirectional type systems.

--Clarifications
-We agree that the clarity of Sec4 could be improved and have already drafted an improved version [1]. Importantly, only the presentation was refined since submission (and now goes beyond 14 pages), so we believe that it would be appropriate to handle this in phase2. We introduce the syntax incrementally, rename type-level terms "static terms", show key kinding rules, switch the order of Sec3.3 & Sec3.4 (R2), show a desugaring (R2) and include formal statements of the theorems/lemmas + the key proof steps.

R1:
-Java does not have quotations, but many other languages on the JVM could host ATT (Groovy, Scala, Clojure). Ace supports Jython.

R2:
-We have drafted a unidirectional version [2]. It cannot support desugarings because an expected type is not available to control the meaning of common intro forms (a key feature of Ace). The basic structure and semantics are not substantially simpler in compensation.

-Partial evaluation is an optimization technique over a fixed semantics; we work on semantic extension, not necessarily for the purpose of optimization. The two could certainly be combined.

R3:
-We target Python for simplicity, but we also mentioned an OpenCL target where the trans_type methods are less trivial, justifying using a typed internal language in Sec4. A previous draft contains some details [3]. We can include this example given the increased page limit if requested (R1: this may satisfy request for more examples).

-Currently, only values of type dyn can be passed into or returned by a Python function. We are designing an extensible bidirectionally typed "FFI" that performs checks at boundaries (ala Racket; [3] has early examples) but this is beyond the scope of this paper.

- R3: Coq still has a fixed, albeit expressive, type system. One cannot isomorphically embed, e.g., a prototypic object system in Coq (distinct from encoding its specification).

[1] https://github.com/cyrus-/papers/blob/master/ace-oopsla14/ace-oopsla14.pdf?raw=true
[2] https://github.com/cyrus-/papers/blob/master/att-icfp14/att-icfp14.pdf?raw=true (not submitted)
[3] https://github.com/cyrus-/papers/blob/master/ace-pldi14/ace-pldi14.pdf?raw=true