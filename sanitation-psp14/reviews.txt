
----------------------- REVIEW 1 ---------------------
PAPER: 5
TITLE: Statically Typed String Sanitation Inside a Python
AUTHORS: Nathan Fulton, Cyrus Omar and Jonathan Aldrich

OVERALL EVALUATION: 3 (strong accept)

----------- REVIEW -----------
The paper presents a type system to check the safety of regular strings that comply to a regular expression pattern devoid of possible SQL injection and cross-site attacks. Furthermore, the string manipulation operations of familiar programming language such as Python or PHP can be translated from the sub-language's equivalent library functions, such that it could take smaller effort and requires smaller learning curve to benefit from the safety type system.

The presentation of the lemmas and theorem goes very fast with rather terse proofs, it would be nice to have the full proofs available as a tech. report associated with the paper, if the readers could check their soundness. Without them, I think it is a bit hard to swallow the claims. Nonetheless, given the authors' previous work and good reputation in the field it is acceptable as the workshop paper has a page limitation (to check with the programme chairs).

The other concern I had is the definitions of safety and security, and the allusion to privacy in the conclusion. To me the distinction of these three concepts in the paper is crucial given the context of the workshop. What makes a string type safe is different from making it secure, and even more so from making it private. I am not satisfied with the privacy part at all. For the distinction of safety and security, it is also quite blurry.

I accept that the SQL injection and XSS attacks are security threats, but simply checking that the string manipulation are covered by the types might be somewhat a simplification of reality. What if the SQL or HTML pages are not processed together in one module, if one of them calls a 3rd party library function in a different target programming language, how would you guarantee the composition is still secure?


----------------------- REVIEW 2 ---------------------
PAPER: 5
TITLE: Statically Typed String Sanitation Inside a Python
AUTHORS: Nathan Fulton, Cyrus Omar and Jonathan Aldrich

OVERALL EVALUATION: 2 (accept)

----------- REVIEW -----------
In this paper, the authors present a new technique that utilizes a type system to sanitize the input to web applications, to defeat common threats such as SQL injection, cross-site scripting, etc.  The authors elaborate their design of the system and the implementation of the design in Python.

The idea of using type systems for automatic input sanitization is refreshing.  I am not aware of similar prior work and feel that it might work.  The benefit here is that static analysis of a program's security quality, in terms of input sanitization, becomes easy: all you need to do is looking at the types specified for the input, which automatically ensures that it does contain the content not supposed to be there.

The authors elaborate the implementation of their system.  However, the paper does not report any evaluation of their prototype, for example, its effectiveness on real web applications and performance.


----------------------- REVIEW 3 ---------------------
PAPER: 5
TITLE: Statically Typed String Sanitation Inside a Python
AUTHORS: Nathan Fulton, Cyrus Omar and Jonathan Aldrich

OVERALL EVALUATION: 3 (strong accept)

----------- REVIEW -----------
This paper describes an approach to safe sanitization and composition of strings with specific application to web programming languages.

The nexus of the "injection" problem in current scripting/web programming languages is that strings are an opaque data type, and that most languages do not provide natural facilities for easy *and principled* sub-typing.

This paper describes a system for accomplishing such sub-typing based on regular expressions and demonstrates an extension to Python via a library using the author's atlang type system. This type of work is perfectly in scope for PSP and very related to the growing LangSec theme/topic. I really liked the approach taken in this paper, especially the implementation approach taken to extend Python.

Specific Comments:

page1, col2, "Guaranteeing that user input has already been sanitized before it is used..." I'd make the point that unpredictable composition of software systems and components makes the "destination" interpreter of most strings unpredictable (and thus susceptible to mis-interpretation and possible compromise).

Right before section 2.1.3, it would be useful to the reader to say explicitly how valid subtype would protect against your SQLi example (we see this later in the paper, but share the intuition --- it is not just that you're verifying some regular expression, but rather the regular expression itself is an expression of a policy describing the allowable language for these "strings"). In other words, to some readers, it may not be immediately obvious what impact verifying something with a regular expression has on the security of the system...you're not just verifying that this is a string, but rather a string that matches very particular rules that can make a decision to accept or reject every piece of input.

What is the advantage of your approach over something like stored procedures or prepared statements (i.e., parameterized queries)?

It would be useful to more clearly expose the costs of your approach to the development process, especially considering rewriting, future modifications, and requirements changing. One can see how your approach is useful for filtering out escape characters, but there are certainly other types of input shaping/verification that are security-relevant.