R1:
-The criterion of "ease-of-use" considers the interface that the language presents to the user in isolation, whereas "continuity", "extensibility" and "interoperability" consider how the language fits into an ecosystem of previous and future abstractions and codebases. That is, "ease-of-use" considers "psychology", whereas the others consider "sociology". Complete orthogonality is not intended -- extensibility and interoperability mechanisms can certainly be analyzed for their ease-of-use, for example -- but we do believe that considering these sociological principles is necessary for adoption. There are other important criteria (e.g. social proof, tooling) but we consider ours to require technical innovations, rather than mainly development/marketing. We will clarify in the final version.

-The primary contributions of our paper are the novel mechanisms and overall design of Ace itself -- the design criteria represent a secondary contribution included to make the reasoning behind Ace crisp and distinguish it from other languages, which we believe focus disproportionately on the first four criteria.

-We mention UPC and Chapel as examples of specialized PGAS languages (X10, Fortress are also), but none are significantly extensible and all but UPC lack continuity. PyPy and RPython expose a subset of Python's semantics but are not internally extensible. We agree that including these prominent projects and characterizing related languages in terms of our criteria would be valuable and will do so.

-Our mechanism does allow types to support multiple backends generically (S3.2.4) --  e.g. the OpenCL primitives can emit OpenCL+C+CUDA code. When the output should differ, the backend can be queried to provide syntactic templates. We will clarify in the final version.

R2:
-Ace solves the problem of "How can we implement domain-specific abstractions requiring compiler support in a *modular* manner?" Such abstractions include DSLs for stencil-based computations or AMR, as well as inter- and intranode parallel  abstractions like OpenCL, MPI and PGAS. All of these can be implemented within a single language using Ace -- unlike any prior language. This is critical in heterogenous environments where multiple pieces of hardware, each with different abstractions, are used across a variety of domains. We expect the community to implement all of these examples in the future -- this paper is intended to introduce the *mechanisms* for doing so, which are novel themselves.

-Although the paper introduces novel language mechanisms, they were designed cohesively specifically for HPC: they operate without run-time overhead, support low-level programming alongside high-level programming, and integrate with standard workflows and libraries. We believe that the future work that builds on Ace will come from the HPC community, and Ace is most useful to HPC practitioners. It clearly falls within the scope of the CfP as "technology that supports parallel programming for large-scale systems as well as smaller-scale components that will plausibly serve as building blocks for next-generation HPC architectures".

R3:
-We discuss how Ace, unlike less-extensible languages, can support safe, fast and natural interoperability with a range of other languages in S3.3.2. We will add a short (2-line) example for declaring an external import from C in the final version. Generating imports automatically from header files is straightforward given a header parser, and an implementation is ongoing for C code.

-The recent Terra also uses a dynamic metalanguage around a static core language, but has weaker type inference and is not as extensible -- it supports some control over layout, but not more general control over typechecking, translation or backend. Lua is far less comomonly-used in HPC, so there is less continuity. We will discuss Terra in the final version.

R4:
-The phrase we used was "syntactic overhead", referring specifically to the concise syntax of Python. The sentence quoted was meant to convey that we want performance overhead comparable to C with ease-of-use comparable to Python, and we will rephrase for clarity.

General:
-Our case study justifies that Ace is suitable for a realistic, medium-scale application. Due to space considerations, we cannot include figures detailing performance/code size/etc. The paper should be evaluated as a language design supplemented with an "initial" case study (Sec1). 

-Similarly, the use cases are meant to characterize the breadth of applications that Ace may be suitable for, rather than delve into specifics of a single second example.

We do not believe that it is feasible to introduce several novel mechanisms, detail several use cases and provide a detailed case study within a single paper. Nevertheless, we believe that this paper represents a foundational contribution to HPC and that Ace will interest a large portion of the SC audience. We thank the reviewers for their thoughtful comments!